#pragma once

#include "scanner.h"

#include <codecvt>
#include <fstream>
#include <iostream>
#include <locale>
#include <string>
#include <vector>
#include <xlocbuf>

#pragma warning(disable : 4996)

namespace samlw {
namespace scanner {
std::shared_ptr<Scanner> Scanner::scanner_instance_;

std::shared_ptr<Scanner> Scanner::GetInstance() {
    if (scanner_instance_ == nullptr)
        scanner_instance_ = std::shared_ptr<Scanner>(new Scanner);

    return scanner_instance_;
}

bool Scanner::ScanFile(const char* file_path) {
    std::ifstream file(file_path, std::ios::binary);

    if (!file.is_open()) {
        logger_->LogMessage("Error opening file");
        return false;
    }

    uint8_t byte;
    std::string s_sig = "";
    while (file >> std::noskipws >> byte) {
        s_sig.append(std::to_string(byte) + " ");
    }
    std::cout << "success file read" << std::endl;
    // std::cout << s_sig << std::endl;

    auto res = ac_->parse_text(s_sig);
    std::cout << res.size() << std::endl;

    file.close();

    return res.size() == 0 ? false : true;
}
}  // namespace scanner
}  // namespace samlw