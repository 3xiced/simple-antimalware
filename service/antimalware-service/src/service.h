#pragma once
#include <string>

#include "ServiceBase.h"
#include "mainhandler.h"

// Default service start options.
#define SERVICE_START_TYPE SERVICE_AUTO_START

// List of service dependencies (none)
#define SERVICE_DEPENDENCIES L""

// Default name of the account under which the service should run
#define SERVICE_ACCOUNT NULL

// Default password to the service account name
#define SERVICE_PASSWORD NULL

// Configuration file
#define SERVICE_CONFIG_FILE L"config.cfg"

// Command to run as a service
#define SERVICE_CMD L"serve"

// Command to run as a stand-alone process
#define PROCESS_CMD L"run"

// Service name
#define SERVICE_NAME L"simple-antimalware-service"

// Service name as displayed in MMC
#define SERVICE_DISP_NAME L"Simple Antimalware Service"

// Service description as displayed in MMC
#define SERVICE_DESC L"This is a simple antimalware service executable"

namespace samlw {
class Service : public CServiceBase {
   public:
    Service(PCWSTR pszServiceName, BOOL fCanStop = TRUE, BOOL fCanShutdown = TRUE,
            BOOL fCanPauseContinue = FALSE);
    ~Service() {}

    void OnStart(DWORD dwArgc, PWSTR* pszArgv) override;
    void OnStop() override;
    void OnNewSession(DWORD dwSessionId) override;
    static DWORD __stdcall ServiceRunner(void* self);
    void Run();

   private:
    BOOL is_stopping_;
    HANDLE has_stopped_event_;
    std::wstring wstrparam_;
    MainHandler main_handler_;
};
}