#include "logger.h"

#include <codecvt>
#include <string>
#include <xlocbuf>

#include "service.h"
#include "stdafx.h"

std::shared_ptr<Logger> Logger::logger_instance_;

std::shared_ptr<Logger> Logger::GetInstance(CServiceBase* service_instance) {
    if (logger_instance_ == nullptr)
        logger_instance_ = std::shared_ptr<Logger>(new Logger(service_instance));

    if (service_instance != nullptr) logger_instance_->service_instance() = service_instance;
    return logger_instance_;
}

/// @brief Logs message, any type, default is EVENTLOG_INFORMATION_TYPE
void Logger::LogMessage(const std::wstring& msg, WORD type) const {
    if (service_instance_ != nullptr)
        service_instance_->WriteLogEntry(msg.c_str(), type, MSG_OPERATION, CATEGORY_SERVICE);
    std::wcout << msg.c_str() << std::endl;
}

/// @brief Logs message, any type, default is EVENTLOG_INFORMATION_TYPE
void Logger::LogMessage(const std::string& msg, WORD type) const {
    if (service_instance_ != nullptr) {
        std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
        service_instance_->WriteLogEntry(converter.from_bytes(msg).c_str(), type,
                                         MSG_OPERATION, CATEGORY_SERVICE);
    }
    std::cout << msg << std::endl;
}

/// @brief Logs message, EVENTLOG_INFORMATION_TYPE as default type
const Logger& Logger::operator<<(const std::wstring& msg) const {
    if (service_instance_ != nullptr)
        service_instance_->WriteLogEntry(msg.c_str(), EVENTLOG_INFORMATION_TYPE,
                                         MSG_OPERATION, CATEGORY_SERVICE);
    std::wcout << msg.c_str() << std::endl;
    return *this;
}

/// @brief Logs message, EVENTLOG_INFORMATION_TYPE as default type
const Logger& Logger::operator<<(const std::string& msg) const {
    if (service_instance_ != nullptr) {
        std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
        service_instance_->WriteLogEntry(converter.from_bytes(msg).c_str(),
                                         EVENTLOG_INFORMATION_TYPE, MSG_OPERATION,
                                         CATEGORY_SERVICE);
    }
    std::cout << msg << std::endl;
    return *this;
}