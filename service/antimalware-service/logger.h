#pragma once
#include <iostream>
#include <memory>

#include "event_ids.h"
#include "ilogger.h"
#include "stdafx.h"

class CServiceBase;

class Logger : public ILogger {
   public:
    static std::shared_ptr<Logger> GetInstance(CServiceBase* service_instance = nullptr);

    Logger(CServiceBase* service_instance) : service_instance_(service_instance) {}
    void LogMessage(const std::wstring& msg,
                    DWORD type = EVENTLOG_INFORMATION_TYPE) const override;
    void LogMessage(const std::string& msg,
                    DWORD type = EVENTLOG_INFORMATION_TYPE) const override;
    const Logger& operator<<(const std::wstring& msg) const override;
    const Logger& operator<<(const std::string& msg) const override;

    inline auto service_instance() const& noexcept -> const CServiceBase* {
        return service_instance_;
    }
    inline auto service_instance() & noexcept -> CServiceBase*& { return service_instance_; }

   protected:
    CServiceBase* service_instance_;
    static std::shared_ptr<Logger> logger_instance_;
};