#include "mainhandler.h"

#include <Shlwapi.h>

#include <iostream>
#include <string>

#include "logger.h"
#include "stdafx.h"

namespace {
void ExecuteCommand(WCHAR command_line[], HANDLE user_token) {
    PROCESS_INFORMATION processInfo;
    STARTUPINFO startupInfo{};
    if (CreateProcessAsUser(user_token, NULL, command_line, NULL, NULL, TRUE,
                            NORMAL_PRIORITY_CLASS, NULL, NULL, &startupInfo, &processInfo)) {
        CloseHandle(processInfo.hProcess);
        CloseHandle(processInfo.hThread);
    }
}
}  // namespace

void MainHandler::OpenApp() {
    PWTS_SESSION_INFO wts_sessions;
    DWORD sessions_cnt;
    if (!WTSEnumerateSessionsW(WTS_CURRENT_SERVER_HANDLE, 0, 1, &wts_sessions, &sessions_cnt))
        return;

    logger_->LogMessage("sessions_cnt=" + std::to_string(sessions_cnt));
    for (DWORD i = 0; i < sessions_cnt; i++) {
        DWORD wts_sess = wts_sessions[i].SessionId;
        if (wts_sess == 0) continue;

        HANDLE userToken;
        if (!WTSQueryUserToken(wts_sess, &userToken)) {
            int err = GetLastError();
            logger_->LogMessage("WTSQueryUserToken failed: " + std::to_string(err),
                                EVENTLOG_ERROR_TYPE);
            continue;
        };

        wchar_t path[_MAX_PATH];
        GetModuleFileName(NULL, path, _countof(path));
        PathRemoveFileSpec(path);
        PathAppend(path, L"app.exe");
        logger_->LogMessage(path);
        ExecuteCommand(path, userToken);
        CloseHandle(userToken);
    }
}