#include "mainhandler.h"

#include <Shlwapi.h>

#include <iostream>
#include <string>

#include "logger.h"
#include "stdafx.h"

namespace {
void ExecuteCommand(WCHAR command_line[], HANDLE user_token) {
    PROCESS_INFORMATION processInfo;
    STARTUPINFO startupInfo{};
    if (CreateProcessAsUser(user_token, NULL, command_line, NULL, NULL, TRUE,
                            NORMAL_PRIORITY_CLASS, NULL, NULL, &startupInfo, &processInfo)) {
        CloseHandle(processInfo.hProcess);
        CloseHandle(processInfo.hThread);
    }
}

void GetAppExecutablePath(wchar_t* out) {
    GetModuleFileName(NULL, out, 260);
    PathRemoveFileSpec(out);
    PathAppend(out, L"app.exe");
}

void RunAppInSession(DWORD wts_sess, std::shared_ptr<ILogger> logger = nullptr) {
    HANDLE user_token;
    if (!WTSQueryUserToken(wts_sess, &user_token)) {
        int err = GetLastError();
        if (logger)
            logger->LogMessage("WTSQueryUserToken failed: " + std::to_string(err),
                               EVENTLOG_ERROR_TYPE);
        return;
    };

    wchar_t path[_MAX_PATH];
    GetAppExecutablePath(path);
    if (logger) logger->LogMessage(path);

    ExecuteCommand(path, user_token);
    CloseHandle(user_token);
};
}  // namespace

/// @brief Starts client in specific session
/// @param session_id DWORD sessiond
void MainHandler::OpenClient(DWORD session_id) { RunAppInSession(session_id, logger_); }

/// @brief Starts client in all existing sessions
void MainHandler::OpenClient() {
    PWTS_SESSION_INFO wts_sessions;
    DWORD sessions_cnt;
    if (!WTSEnumerateSessionsW(WTS_CURRENT_SERVER_HANDLE, 0, 1, &wts_sessions, &sessions_cnt))
        return;

    logger_->LogMessage("sessions_cnt=" + std::to_string(sessions_cnt));
    for (DWORD i = 0; i < sessions_cnt; i++) {
        DWORD wts_sess = wts_sessions[i].SessionId;
        if (wts_sess == 0) continue;

        RunAppInSession(wts_sess, logger_);
    }
}