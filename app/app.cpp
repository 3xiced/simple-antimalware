// Dear ImGui: standalone example application for GLFW + OpenGL2, using legacy fixed pipeline
// (GLFW is a cross-platform general purpose library for handling windows, inputs,
// OpenGL/Vulkan/Metal graphics context creation, etc.)

// Learn about Dear ImGui:
// - FAQ                  https://dearimgui.com/faq
// - Getting Started      https://dearimgui.com/getting-started
// - Documentation        https://dearimgui.com/docs (same as your local docs/ folder).
// - Introduction, links and more at the top of imgui.cpp

// **DO NOT USE THIS CODE IF YOUR CODE/ENGINE IS USING MODERN OPENGL (SHADERS, VBO, VAO,
// etc.)**
// **Prefer using the code in the example_glfw_opengl2/ folder**
// See imgui_impl_glfw.cpp for details.

#include <Windows.h>
#include <stdio.h>
#include <windowsx.h>

#include <string>
#include <thread>
#include <vector>

#include "imgui.h"
#include "imgui_impl_glfw.h"
#include "imgui_impl_opengl2.h"
#include "imgui_impl_win32.h"
#include "ui.h"
#ifdef __APPLE__
#define GL_SILENCE_DEPRECATION
#endif
#include <GLFW/glfw3.h>

#include <iostream>

// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease
// of testing and compatibility with old VS compilers. To link with VS2010-era libraries,
// VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of
// GLFW that is adequate for your version of Visual Studio.
#if defined(_MSC_VER) && (_MSC_VER >= 1900) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS)
#pragma comment(lib, "legacy_stdio_definitions")
#endif

static void glfw_error_callback(int error, const char* description) {
    fprintf(stderr, "GLFW Error %d: %s\n", error, description);
}

#define VK_Z_KEY 0x5A
// These keys are used to send windows to tray
#define TRAY_KEY VK_Z_KEY
#define MOD_KEY MOD_WIN + MOD_SHIFT

#define WM_ICON 0x1C0A
#define WM_OURICON 0x1C0B
#define EXIT_ID 0x99
#define SHOW_ALL_ID 0x98
#define MAXIMUM_WINDOWS 100

// Stores hidden window record.
typedef struct HIDDEN_WINDOW {
    NOTIFYICONDATA icon;
    HWND window;
} HIDDEN_WINDOW;

// Current execution context
typedef struct TRCONTEXT {
    HWND mainWindow;
    HIDDEN_WINDOW icons[MAXIMUM_WINDOWS];
    HMENU trayMenu;
    int iconIndex;  // How many windows are currently hidden
} TRCONTEXT;

HANDLE saveFile;

// Saves our hidden windows so they can be restored in case
// of crashing.
void save(const TRCONTEXT* context) {
    DWORD numbytes;
    // Truncate file
    SetFilePointer(saveFile, 0, NULL, FILE_BEGIN);
    SetEndOfFile(saveFile);
    if (!context->iconIndex) {
        return;
    }
    for (int i = 0; i < context->iconIndex; i++) {
        if (context->icons[i].window) {
            std::string str;
            str = std::to_string((long)context->icons[i].window);
            str += ',';
            const char* handleString = str.c_str();
            WriteFile(saveFile, handleString, strlen(handleString), &numbytes, NULL);
        }
    }
}

// Restores a window
void showWindow(TRCONTEXT* context, LPARAM lParam) {
    for (int i = 0; i < context->iconIndex; i++) {
        if (context->icons[i].icon.uID == HIWORD(lParam)) {
            ShowWindow(context->icons[i].window, SW_SHOW);
            Shell_NotifyIcon(NIM_DELETE, &context->icons[i].icon);
            SetForegroundWindow(context->icons[i].window);
            context->icons[i] = {};
            std::vector<HIDDEN_WINDOW> temp = std::vector<HIDDEN_WINDOW>(context->iconIndex);
            // Restructure array so there are no holes
            for (int j = 0, x = 0; j < context->iconIndex; j++) {
                if (context->icons[j].window) {
                    temp[x] = context->icons[j];
                    x++;
                }
            }
            memcpy_s(context->icons, sizeof(context->icons), &temp.front(),
                     sizeof(HIDDEN_WINDOW) * context->iconIndex);
            context->iconIndex--;
            save(context);
            break;
        }
    }
}

// Minimizes the current window to tray.
// Uses currently focused window unless supplied a handle as the argument.
void minimizeToTray(TRCONTEXT* context, long restoreWindow) {
    // Taskbar and desktop windows are restricted from hiding.
    const char restrictWins[][14] = {{"WorkerW"}, {"Shell_TrayWnd"}};

    HWND currWin = 0;
    if (!restoreWindow) {
        currWin = GetForegroundWindow();
    } else {
        currWin = reinterpret_cast<HWND>(restoreWindow);
    }

    if (!currWin) {
        return;
    }

    char className[256];
    if (!GetClassNameW(currWin, (LPWSTR)className, 256)) {
        return;
    } else {
        for (int i = 0; i < sizeof(restrictWins) / sizeof(*restrictWins); i++) {
            if (strcmp(restrictWins[i], className) == 0) {
                return;
            }
        }
    }
    if (context->iconIndex == MAXIMUM_WINDOWS) {
        MessageBox(NULL, "Error! Too many hidden windows. Please unhide some.",
                   "SimpleAntiMalware", MB_OK | MB_ICONERROR);
        return;
    }
    ULONG_PTR icon = GetClassLongPtr(currWin, GCLP_HICONSM);
    if (!icon) {
        icon = SendMessage(currWin, WM_GETICON, 2, NULL);
        if (!icon) {
            return;
        }
    }

    NOTIFYICONDATA nid;
    nid.cbSize = sizeof(NOTIFYICONDATA);
    nid.hWnd = context->mainWindow;
    nid.hIcon = (HICON)icon;
    nid.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP | NIF_SHOWTIP;
    nid.uVersion = NOTIFYICON_VERSION_4;
    nid.uID = LOWORD(reinterpret_cast<UINT>(currWin));
    nid.uCallbackMessage = WM_ICON;
    GetWindowText(currWin, nid.szTip, 128);
    context->icons[context->iconIndex].icon = nid;
    context->icons[context->iconIndex].window = currWin;
    context->iconIndex++;
    Shell_NotifyIcon(NIM_ADD, &nid);
    Shell_NotifyIcon(NIM_SETVERSION, &nid);
    ShowWindow(currWin, SW_HIDE);
    if (!restoreWindow) {
        save(context);
    }
}

// Adds our own icon to tray
void createTrayIcon(HWND mainWindow, HINSTANCE hInstance, NOTIFYICONDATA* icon) {
    icon->cbSize = sizeof(NOTIFYICONDATA);
    icon->hWnd = mainWindow;
    icon->hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(101));
    icon->uFlags = NIF_ICON | NIF_TIP | NIF_SHOWTIP | NIF_MESSAGE;
    icon->uVersion = NOTIFYICON_VERSION_4;
    icon->uID = reinterpret_cast<UINT>(mainWindow);
    icon->uCallbackMessage = WM_OURICON;
    strcpy_s(icon->szTip, "SimpleAntiMalware");
    Shell_NotifyIcon(NIM_ADD, icon);
    Shell_NotifyIcon(NIM_SETVERSION, icon);
}

// Creates our tray icon menu
void createTrayMenu(HMENU* trayMenu) {
    *trayMenu = CreatePopupMenu();

    MENUITEMINFO showAllMenuItem;
    MENUITEMINFO exitMenuItem;

    exitMenuItem.cbSize = sizeof(MENUITEMINFO);
    exitMenuItem.fMask = MIIM_STRING | MIIM_ID;
    exitMenuItem.fType = MFT_STRING;
    exitMenuItem.dwTypeData = (LPSTR) "Exit";
    exitMenuItem.cch = 5;
    exitMenuItem.wID = EXIT_ID;

    showAllMenuItem.cbSize = sizeof(MENUITEMINFO);
    showAllMenuItem.fMask = MIIM_STRING | MIIM_ID;
    showAllMenuItem.fType = MFT_STRING;
    showAllMenuItem.dwTypeData = (LPSTR) "Restore all windows";
    showAllMenuItem.cch = 20;
    showAllMenuItem.wID = SHOW_ALL_ID;

    InsertMenuItem(*trayMenu, 0, FALSE, &showAllMenuItem);
    InsertMenuItem(*trayMenu, 0, FALSE, &exitMenuItem);
}
// Shows all hidden windows;
void showAllWindows(TRCONTEXT* context) {
    for (int i = 0; i < context->iconIndex; i++) {
        ShowWindow(context->icons[i].window, SW_SHOW);
        Shell_NotifyIcon(NIM_DELETE, &context->icons[i].icon);
        context->icons[i] = {};
    }
    save(context);
    context->iconIndex = 0;
}

void exitApp() { PostQuitMessage(0); }

// Creates and reads the save file to restore hidden windows in case of unexpected termination
void startup(TRCONTEXT* context) {
    if ((saveFile = CreateFile("SimpleAntiMalware.dat", GENERIC_READ | GENERIC_WRITE, 0, NULL,
                               OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL)) ==
        INVALID_HANDLE_VALUE) {
        MessageBox(NULL, "Error! SimpleAntiMalware could not create a save file.",
                   "SimpleAntiMalware", MB_OK | MB_ICONERROR);
        exitApp();
    }
    // Check if we've crashed (i. e. there is a save file) during current uptime and
    // if there are windows to restore, in which case restore them and
    // display a reassuring message.
    if (GetLastError() == ERROR_ALREADY_EXISTS) {
        DWORD numbytes;
        DWORD fileSize = GetFileSize(saveFile, NULL);

        if (!fileSize) {
            return;
        };

        FILETIME saveFileWriteTime;
        GetFileTime(saveFile, NULL, NULL, &saveFileWriteTime);
        uint64_t writeTime = ((uint64_t)saveFileWriteTime.dwHighDateTime << 32 |
                              (uint64_t)saveFileWriteTime.dwLowDateTime) /
                             10000;
        GetSystemTimeAsFileTime(&saveFileWriteTime);
        writeTime = (((uint64_t)saveFileWriteTime.dwHighDateTime << 32 |
                      (uint64_t)saveFileWriteTime.dwLowDateTime) /
                     10000) -
                    writeTime;

        if (GetTickCount64() < writeTime) {
            return;
        }

        std::vector<char> contents = std::vector<char>(fileSize);
        ReadFile(saveFile, &contents.front(), fileSize, &numbytes, NULL);
        char handle[10];
        int index = 0;
        for (size_t i = 0; i < fileSize; i++) {
            if (contents[i] != ',') {
                handle[index] = contents[i];
                index++;
            } else {
                index = 0;
                minimizeToTray(context, std::stoi(std::string(handle)));
                memset(handle, 0, sizeof(handle));
            }
        }
        std::string restore_message =
            "SimpleAntiMalware had previously been terminated unexpectedly.\n\nRestored " +
            std::to_string(context->iconIndex) +
            (context->iconIndex > 1 ? " icons." : " icon.");
        MessageBox(NULL, restore_message.c_str(), "SimpleAntiMalware", MB_OK);
    }
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    TRCONTEXT* context = reinterpret_cast<TRCONTEXT*>(GetWindowLongPtr(hwnd, GWLP_USERDATA));
    POINT pt;
    switch (uMsg) {
        case WM_ICON:
            if (LOWORD(lParam) == WM_LBUTTONDBLCLK) {
                showWindow(context, lParam);
            }
            break;
        case WM_OURICON:
            if (LOWORD(lParam) == WM_RBUTTONUP) {
                SetForegroundWindow(hwnd);
                GetCursorPos(&pt);
                TrackPopupMenuEx(context->trayMenu,
                                 (GetSystemMetrics(SM_MENUDROPALIGNMENT) ? TPM_RIGHTALIGN
                                                                         : TPM_LEFTALIGN) |
                                     TPM_BOTTOMALIGN,
                                 pt.x, pt.y, hwnd, NULL);
            }
            break;
        case WM_COMMAND:
            if (HIWORD(wParam) == 0) {
                switch
                    LOWORD(wParam) {
                        case SHOW_ALL_ID:
                            showAllWindows(context);
                            break;
                        case EXIT_ID:
                            exitApp();
                            break;
                    }
            }
            break;
        case WM_HOTKEY:  // We only have one hotkey, so no need to check the message
            minimizeToTray(context, NULL);
            break;
        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

#pragma warning(push)
#pragma warning(disable : 4100)
// Main code
int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine,
                    int nCmdShow) {
    ImGui_ImplWin32_EnableDpiAwareness();
    glfwSetErrorCallback(glfw_error_callback);
    if (!glfwInit()) return 1;

    // Create window with graphics context
    glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE);
    int app_width = 800, app_height = 600;
    GLFWwindow* window = glfwCreateWindow(
        app_width, app_height, "Dear ImGui GLFW+OpenGL2 example", nullptr, nullptr);
    if (window == nullptr) return 1;
    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);  // Enable vsync

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO();
    (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;  // Enable Keyboard Controls
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;   // Enable Gamepad Controls
    io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;      // Enable Docking
    io.ConfigFlags |=
        ImGuiConfigFlags_ViewportsEnable;  // Enable Multi-Viewport / Platform Windows
    // io.ConfigViewportsNoAutoMerge = true;
    // io.ConfigViewportsNoTaskBarIcon = true;

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();
    // ImGui::StyleColorsLight();

    // When viewports are enabled we tweak WindowRounding/WindowBg so platform windows can
    // look identical to regular ones.
    ImGuiStyle& style = ImGui::GetStyle();
    if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable) {
        style.WindowRounding = 0.0f;
        style.Colors[ImGuiCol_WindowBg].w = 1.0f;
    }

    // Setup Platform/Renderer backends
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL2_Init();

    // Load Fonts
    // - If no fonts are loaded, dear imgui will use the default font. You can also load
    // multiple fonts and use ImGui::PushFont()/PopFont() to select them.
    // - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to
    // select the font among multiple.
    // - If the file cannot be loaded, the function will return a nullptr. Please handle those
    // errors in your application (e.g. use an assertion, or display an error and quit).
    // - The fonts will be rasterized at a given size (w/ oversampling) and stored into a
    // texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which
    // ImGui_ImplXXXX_NewFrame below will call.
    // - Use '#define IMGUI_ENABLE_FREETYPE' in your imconfig file to use Freetype for higher
    // quality font rendering.
    // - Read 'docs/FONTS.md' for more instructions and details.
    // - Remember that in C/C++ if you want to include a backslash \ in a string literal you
    // need to write a double backslash \\ !
    io.Fonts->AddFontDefault();
    auto custom_font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\segoeui.ttf", 28.0f);

    // Our state
    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

    TRCONTEXT context = {};

    NOTIFYICONDATA icon = {};

    // Mutex to allow only one instance
    const char szUniqueNamedMutex[] = "SimpleAntiMalware_mutex";
    HANDLE mutex = CreateMutex(NULL, TRUE, szUniqueNamedMutex);
    if (GetLastError() == ERROR_ALREADY_EXISTS) {
        MessageBox(NULL, "Error! Another instance of SimpleAntiMalware is already running.",
                   "SimpleAntiMalware", MB_OK | MB_ICONERROR);
        return 1;
    }

    BOOL bRet;
    MSG msg;

    const char CLASS_NAME[] = "SimpleAntiMalware";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = (LPCSTR)CLASS_NAME;

    if (!RegisterClass(&wc)) {
        return 1;
    }

    context.mainWindow =
        CreateWindow(CLASS_NAME, NULL, NULL, 0, 0, 0, 0, HWND_MESSAGE, NULL, hInstance, NULL);

    if (!context.mainWindow) {
        return 1;
    }

    // Store our context in main window for retrieval by WindowProc
    SetWindowLongPtr(context.mainWindow, GWLP_USERDATA, reinterpret_cast<LONG>(&context));

    if (!RegisterHotKey(context.mainWindow, 0, MOD_KEY | MOD_NOREPEAT, TRAY_KEY)) {
        MessageBox(NULL, "Error! Could not register the hotkey.", "SimpleAntiMalware",
                   MB_OK | MB_ICONERROR);
        return 1;
    }

    createTrayIcon(context.mainWindow, hInstance, &icon);
    createTrayMenu(&context.trayMenu);
    startup(&context);

    auto run_context = [&]() {
        while ((bRet = GetMessage(&msg, 0, 0, 0)) != 0) {
            if (bRet != -1) {
                DispatchMessage(&msg);
            }
        }
        // Clean up on exit;
        showAllWindows(&context);
        Shell_NotifyIcon(NIM_DELETE, &icon);
        ReleaseMutex(mutex);
        CloseHandle(mutex);
        CloseHandle(saveFile);
        DestroyMenu(context.trayMenu);
        DestroyWindow(context.mainWindow);
        DeleteFile("SimpleAntiMalware.dat");  // No save file means we have exited gracefully
        UnregisterHotKey(context.mainWindow, 0);
    };

    std::thread run_context_menu_task{std::thread(run_context)};

    run_context_menu_task.detach();
    // Main loop
    while (!glfwWindowShouldClose(window)) {
        // Poll and handle events (inputs, window resize, etc.)
        // You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear
        // imgui wants to use your inputs.
        // - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main
        // application, or clear/overwrite your copy of the mouse data.
        // - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your
        // main application, or clear/overwrite your copy of the keyboard data. Generally you
        // may always pass all inputs to dear imgui, and hide them from your application based
        // on those two flags.
        glfwPollEvents();

        // Start the Dear ImGui frame
        ImGui_ImplOpenGL2_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();
        ImGui::PushFont(custom_font);

        static bool active{true};
        active = ui::RenderUI();
        if (!active) break;
        ImGui::PopFont();
        // Rendering
        ImGui::Render();
        int display_w, display_h;
        glfwGetFramebufferSize(window, &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(clear_color.x * clear_color.w, clear_color.y * clear_color.w,
                     clear_color.z * clear_color.w, clear_color.w);
        glClear(GL_COLOR_BUFFER_BIT);

        // If you are using this code with non-legacy OpenGL header/contexts (which you should
        // not, prefer using imgui_impl_opengl3.cpp!!), you may need to backup/reset/restore
        // other state, e.g. for current shader using the commented lines below.
        // GLint last_program;
        // glGetIntegerv(GL_CURRENT_PROGRAM, &last_program);
        // glUseProgram(0);
        ImGui_ImplOpenGL2_RenderDrawData(ImGui::GetDrawData());
        // glUseProgram(last_program);

        // Update and Render additional Platform Windows
        // (Platform functions may change the current OpenGL context, so we save/restore it to
        // make it easier to paste this code elsewhere.
        //  For this specific demo app we could also call glfwMakeContextCurrent(window)
        //  directly)5
        if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable) {
            GLFWwindow* backup_current_context = glfwGetCurrentContext();
            ImGui::UpdatePlatformWindows();
            ImGui::RenderPlatformWindowsDefault();
            glfwMakeContextCurrent(backup_current_context);
        }

        glfwMakeContextCurrent(window);
        glfwSwapBuffers(window);
    }

    // Cleanup
    ImGui_ImplOpenGL2_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    glfwDestroyWindow(window);
    glfwTerminate();

    return 0;
}
