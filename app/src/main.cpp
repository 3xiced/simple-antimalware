#include <chrono>
#include <cstdlib>
#include <iostream>
#include <thread>

#include "gui.h"
#include "imgui_impl_win32.h"
#include "theme.h"

bool reset_size = true;
bool ncmenu = true;

int tabs = 1;
Theme theme;

int __stdcall wWinMain(HINSTANCE instance, HINSTANCE previousInstance, PWSTR arguments,
                       int commandShow) {
    HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(console, 1);

    WNDCLASSEX wc = {sizeof(WNDCLASSEX),       CS_CLASSDC, WndProc, 0L,   0L,
                     GetModuleHandle(NULL),    NULL,       NULL,    NULL, NULL,
                     _T("Simple Antimalware"), NULL};
    RegisterClassEx(&wc);
    HWND hwnd = CreateWindow(wc.lpszClassName, _T("Simple Antimalware"), WS_OVERLAPPEDWINDOW,
                             0, 0, 50, 50, NULL, NULL, wc.hInstance, NULL);

    if (!CreateDeviceD3D(hwnd)) {
        CleanupDeviceD3D();
        UnregisterClass(wc.lpszClassName, wc.hInstance);
        return 1;
    }

    ShowWindow(
        GetConsoleWindow(),
        SW_HIDE);  // fixed hiding console you can show console by change SW_HIDE to SW_SHOW
    UpdateWindow(hwnd);

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO();
    (void)io;
    // io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;       // Enable Keyboard Controls
    io.ConfigFlags |=
        ImGuiConfigFlags_ViewportsEnable;  // Enable Multi-Viewport / Platform Windows
    io.IniFilename = nullptr;
    io.LogFilename = nullptr;

    theme.Register(io);

    ImGuiStyle& style = ImGui::GetStyle();
    if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable) {
        style.WindowRounding = 4.0f;
        style.Colors[ImGuiCol_WindowBg].w = 1.0f;
    }

    // style.WindowTitleAlign = ImVec2(0.5, 0.5);
    // style.FramePadding = ImVec2(5, 5);

    ImGui_ImplWin32_Init(hwnd);
    ImGui_ImplDX9_Init(g_pd3dDevice);

    bool done = true;

    std::string str_window_title = "";
    const char* window_title = str_window_title.c_str();
    ImVec2 window_size{690, 450};

    DWORD window_flags =
        ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoScrollbar |
        ImGuiHoveredFlags_AllowWhenBlockedByActiveItem;  // | ImGuiWindowFlags_NoResize;

    while (done) {
        MSG msg;
        while (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE)) {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
            if (msg.message == WM_QUIT) done = false;
        }
        if (!done) break;

        ImGuiStyle* style = &ImGui::GetStyle();

        ImGui_ImplDX9_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame();
        {
            if (ncmenu) {
                if (reset_size) {
                    ImGui::SetNextWindowSize(window_size);
                    reset_size = false;
                }
                // ImGui::SetNextWindowBgAlpha(1.0f);
                // static bool themec = false;
                // ImGui::PushFont(theme.font);
                // ImGui::Begin(window_title, &ncmenu, window_flags);
                // ImGui::SetCursorPos({250, 200});
                // ImGui::Text("Hi From ProB1#0100");
                // ImGui::PopFont();
                // ImGui::End();
                static float f = 0.0f;
                static int counter = 0;

                ImGui::Begin("Simple Antimalware");  // Create a window called "Hello, world!"
                                                     // and append into it.

                ImGui::Text("This is some useful text.");  // Display some text (you can use a
                                                           // format strings too)

                ImGui::SliderFloat("float", &f, 0.0f,
                                   1.0f);  // Edit 1 float using a slider from 0.0f to 1.0f

                if (ImGui::Button("Button"))  // Buttons return true when clicked (most
                                              // widgets return true when edited/activated)
                    counter++;
                ImGui::SameLine();
                ImGui::Text("counter = %d", counter);

                ImGui::Text("Application average %.3f ms/frame (%.1f FPS)",
                            1000.0f / io.Framerate, io.Framerate);
                ImGui::End();

            } else {
                exit(0);
            }
        }
        ImGui::EndFrame();
        g_pd3dDevice->SetRenderState(D3DRS_ZENABLE, FALSE);
        g_pd3dDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
        g_pd3dDevice->SetRenderState(D3DRS_SCISSORTESTENABLE, FALSE);
        g_pd3dDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, NULL, 1.0f, 0);
        if (g_pd3dDevice->BeginScene() >= 0) {
            ImGui::Render();
            ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());
            g_pd3dDevice->EndScene();
        }

        if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable) {
            ImGui::UpdatePlatformWindows();
            ImGui::RenderPlatformWindowsDefault();
        }

        HRESULT result = g_pd3dDevice->Present(NULL, NULL, NULL, NULL);

        if (result == D3DERR_DEVICELOST &&
            g_pd3dDevice->TestCooperativeLevel() == D3DERR_DEVICENOTRESET)
            ResetDevice();
    }
    ImGui_ImplDX9_Shutdown();
    ImGui_ImplWin32_Shutdown();
    ImGui::DestroyContext();

    CleanupDeviceD3D();
    DestroyWindow(hwnd);
    UnregisterClass(wc.lpszClassName, wc.hInstance);

    return EXIT_SUCCESS;
}
