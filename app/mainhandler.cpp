#include "mainhandler.h"

#include <Windows.h>
#include <stdio.h>
#include <winnt.h>

#include <codecvt>
#include <iostream>
#include <string>
#include <thread>
#include <xlocbuf>

#pragma warning(disable : 4996)

namespace samlw_app {
void MainHandler::SendMessageToServer(const wchar_t* msg, std::wstring* response) {
    HANDLE pipe = CreateFileW(
        PIPE_PATH,
        FILE_GENERIC_WRITE | FILE_GENERIC_READ,  // only need read access
        FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

    if (pipe == INVALID_HANDLE_VALUE) {
        *response = std::wstring(L"Error code:") + std::to_wstring(GetLastError());
        return;
    }

    DWORD numBytesWritten = 0;
    BOOL result1 =
        WriteFile(pipe,                                 // handle to our outbound pipe
                  msg,                                  // data to send
                  (wcslen(msg) + 1) * sizeof(wchar_t),  // length of data to send (bytes)
                  &numBytesWritten,  // will store actual amount of data sent
                  NULL               // not using overlapped IO
        );

    // The read operation will block until there is data to read
    wchar_t buffer[512];
    DWORD numBytesRead = 0;
    BOOL result = ReadFile(pipe,
                           buffer,                 // the data from the pipe will be put here
                           511 * sizeof(wchar_t),  // number of bytes allocated
                           &numBytesRead,  // this will store number of bytes actually read
                           NULL            // not using overlapped IO
    );

    if (result) {
        buffer[numBytesRead / sizeof(wchar_t)] = '\0';  // null terminate the string
        std::wcout << "Number of bytes read: " << numBytesRead << std::endl;
        std::wcout << "Message: " << buffer << std::endl;

        *response = std::wstring(buffer);
    } else {
        std::wcout << "Failed to read data from the pipe." << std::endl;
    }

    // Close our pipe handle
    CloseHandle(pipe);

    std::wcout << "Done." << std::endl;
}
}  // namespace samlw_app